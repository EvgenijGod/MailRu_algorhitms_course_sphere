#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <time.h>
#include <limits.h>
using namespace std;

string s1, s2;

string A[8];
int B[8];

string sum(string a1, string a2) {
    if (a1.size() > a2.size())
        swap(a1, a2);
    string res;
    reverse(a1.begin(), a1.end());
    reverse(a2.begin(), a2.end());
    a1.resize(a2.size(), '0');
    int len= a1.size();
    int r = 0;
    for (int i = 0; i < len; i++) {
        int x1 = a1[i] - '0', x2 = a2[i] - '0';
        x1 += x2 + r;
        r = x1 / 10;
        char tmp = x1 % 10 + '0';
        res.push_back(tmp);
    }
    if (r != 0) {
        char tmp = r + '0';
        res.push_back(tmp);
    }
    reverse(res.begin(), res.end());
    return res;
}

string razn(string a1, string a2) { //a1 > a2
    string res;
    reverse(a1.begin(), a1.end());
    reverse(a2.begin(), a2.end());
    a2.resize(a1.size(), '0');
    int len= a1.size();
    int r = 0;
    for (int i = 0; i < len; i++) {
        int x1 = a1[i] - '0', x2 = a2[i] - '0';
        if (x1 - r < x2) {
            x1 = x1 + 10 - r - x2;
            r = 1;
        } else {
            x1 = x1 - r - x2;
            r = 0;
        }
        char tmp = x1 % 10 + '0';
        res.push_back(tmp);
    }
    if (r != 0) {
        char tmp = r + '0';
        res.push_back(tmp);
    }
    int size = res.size() - 1;
    while(size >= 0 && res[size] == '0') {
        res.pop_back();
        size--;
    }
    if (size == -1)
        res = "0";
    reverse(res.begin(), res.end());
    return res;
}

bool is_more (string a1, string a2) { //a1 >= a2 ?
    int len1 = a1.size(), len2 = a2.size();
    if (len1 > len2)
        return true;
    if (len1 < len2)
        return false;
    for (int i = 0; i < len1; i++) {
        if (a1[i] > a2[i])
            return true;
        if (a1[i] < a2[i])
            return false;
    }
    return true;
}


int main() {
    char oweuge;
    cin >> s1 >> oweuge >> s2;
    if (is_more(s1, s2) == false){
        cout << "0";
        return 0;
    }
    A[1] = s2;
    B[1] = 1;
    for (int i = 2; i < 8; i++) {
        s2 = sum(s2, s2);
        A[i] = s2;
        B[i] = B[i - 1] * 2;
    }
    string tmp = "";
    int len = s1.size();
    int iter = 0;
    if (len % 2 == 1)
        tmp.push_back(s1[iter++]);
    else {
        tmp.push_back(s1[0]);
        tmp.push_back(s1[1]);
        iter = 2;
    }
    vector<int> evg;
    int c;
    while (iter < len + 2) {
        c = 0;
        if (is_more(tmp, A[1])) {
            for (int i = 7; i > 0; i--) {
                if (is_more(tmp, A[i])) {
                    c += B[i];
                    tmp = razn(tmp, A[i]);
                }
            }
        }
        evg.push_back(c);
        c = 0;
        if (tmp == "0") {
            if (s1[iter++] != '0') {
                tmp = "";
                tmp.push_back(s1[iter-1]);
            }
        } else {
            tmp.push_back(s1[iter++]);
        }
        if (tmp == "0") {
            if (s1[iter++] != '0') {
                tmp = "";
                tmp.push_back(s1[iter-1]);
            }
        } else {
            tmp.push_back(s1[iter++]);
        }
    }
    int i = 0;
    while(evg[i] == 0)
        i++;
    cout << evg[i++];
    for (; i < evg.size(); i++) {
        if (evg[i] < 10) {
            cout << "0";
        }
        cout << evg[i];
    }
    return 0;
}