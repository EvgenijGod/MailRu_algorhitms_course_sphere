#include <iostream>
#include <algorithm>
#include <deque>
#include <string>
#include <vector>
using namespace std;

int n, m, xx, yy, X, Y;
vector< vector <char>> A;
vector< vector <int>> B;
vector< vector <int>> C;
//unsigned char A[201][201] = {};
//int B[201][201] = {};
//int C[201][201] = {};
deque<pair<int, int>> S;

void bfs(int x, int y) {
    while (S.empty() == false) {
        pair<int, int> tmp = S.front();
        x = tmp.first;
        y = tmp.second;
        S.pop_front();
        if (C[x][y] == 1)
            continue;
        if (A[x][y] == '#')
            return;
        if (x + 1 < n && A[x + 1][y] != '+' && C[x + 1][y] == 0) {
            C[x + 1][y] = 2;
            B[x + 1][y] = B[x][y] + 1;
            S.push_back({x + 1, y});
        }
        if (x - 1 >= 0 && A[x - 1][y] != '+' && C[x - 1][y] == 0) {
            C[x - 1][y] = 2;
            B[x - 1][y] = B[x][y] + 1;
            S.push_back({x - 1, y});
        }
        if (y + 1 < m && A[x][y + 1] != '+' && C[x][y + 1] == 0) {
            C[x][y + 1] = 2;
            B[x][y + 1] = B[x][y] + 1;
            S.push_back({x, y + 1});
        }
        if (y - 1 >= 0 && A[x][y - 1] != '+' && C[x][y - 1] == 0) {
            C[x][y - 1] = 2;
            B[x][y - 1] = B[x][y] + 1;
            S.push_back({x, y - 1});
        }
        C[x][y] = 1;
    }
}
int main() {
    cin >> n >> m;
    A.resize(n);
    B.resize(n);
    C.resize(n);
    for (int i = 0; i < n; i++) {
        A[i].resize(m);
        B[i].resize(m);
        C[i].resize(m);
        string s;
        cin >> s;
        for (int j = 0; j < m; j++) {
            A[i][j] = s[j];
            if (s[j] == '@') {
                xx = i;
                yy = j;
            }
            if (s[j] == '#') {
                X = i;
                Y = j;
            }
            B[i][j] = 1000000;
        }
    }
    S.push_back({xx, yy});
    B[xx][yy] = 0;
    bfs(xx, yy);

    if (B[X][Y] == 1000000)
        cout << -1;
    else
        cout << B[X][Y];
    return 0;
}