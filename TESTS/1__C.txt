#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <stack>
using namespace std;

long long a1, a0, n, m;

class matrix{
public:
    long long A[2][2];
    long long B[2][2];
    matrix() {
        B[0][0] = B[1][1] = B[0][1] = B[1][0] = 0;
        A[0][0] = 0;
        A[1][1] = A[0][1] = A[1][0] = 1;
    }
    void umn (long long nn) {
        if (nn == 1) {
            return;
        }
        if (nn % 2 == 0) {
            umn(nn / 2);
            B[0][0] = B[1][1] = B[0][1] = B[1][0] = 0;
            for (int i = 0; i < 2; i++) {
                for (int j = 0; j < 2; j++) {
                    for (int c = 0; c < 2; c++) {
                        B[i][j] = (B[i][j] + A[i][c] * A[c][j]) % m;
                    }
                }
            }
            for (int i = 0; i < 2; i++) {
                for (int j = 0; j < 2; j++)
                    A[i][j] = B[i][j];
            }
        } else {
            umn(nn - 1);
            long long tmp;
            tmp = A[0][1];
            A[0][1] = (A[0][1] + A[0][0]) % m;
            A[0][0] = tmp;
            tmp = A[1][1];
            A[1][1] = (A[1][1] + A[1][0]) % m;
            A[1][0] = tmp;
        }
    }
};
int main() {
    cin >> a0 >> a1 >> n >> m;
    a0 %= m;
    a1 %= m;
    matrix S;
    if (n == 0) {
        cout << a0;
        return 0;
    }
    if (n == 1) {
        cout << a1;
        return 0;
    }
    S.umn(n - 1);
    long long tmp;
    tmp = ((a0 * S.A[0][1]) % m + (a1 * S.A[1][1]) % m) % m;
    cout << tmp;
    return 0;
}