#include <iostream>
#include <algorithm>
#include <fstream>
using namespace std;

class stack {
    // сюда пользователь не попадет
    pair<int, char> *mass;
    int N, k = 0;
public:
    stack(int size) {
        N = size;
        mass = new pair<int, char>[N];
    }
    ~stack(){ // деструктор
        delete []mass;
    }
    bool push(pair<int, char> elem) {
        if (k >= N)
            return false;
        mass[k++] = elem;
        return true;
    }
    pair<int, char> pop() {
        if (k <= 0) throw "stack underflow";
        return mass[--k];
    }
    pair<int, char> peek() {
        if (k <= 0) throw "stack underflow";
        return mass[k - 1];
    }
    bool empty() {
        return k <= 0;
    }
    int size() {
        return k;
    }
};

int main() {
    stack s(10000);
    string str;
    getline(cin, str);
    int n = str.size();
    int tmp = 0, tmp1 = 0;
    for (int i = 0; i < n; i++) {
        char c = str[i];
        if (c == '+' || c == '-' || c == '*' || c == '/') {
            s.push(make_pair(0, c));
            tmp = tmp1 = 0;
        } else {
            if (isdigit(c)) {
                tmp1 = 1;
                tmp = tmp * 10 + (c - '0');
            } else {
                if (tmp1) {
                    s.push(make_pair(tmp, '!'));
                    tmp = tmp1 = 0;
                    if (s.size() >= 3) {
                        while (true) {
                            pair<int, char> x1 = s.pop(), x2 = s.pop(), com = s.pop();
                            if (x1.second == '!' && x2.second == '!') {
                                if (com.second == '+') {
                                    s.push(make_pair(x1.first + x2.first, '!'));
                                }
                                if (com.second == '-') {
                                    s.push(make_pair(x2.first - x1.first, '!'));
                                }
                                if (com.second == '*') {
                                    s.push(make_pair(x1.first * x2.first, '!'));
                                }
                                if (com.second == '/') {
                                    s.push(make_pair(x2.first / x1.first, '!'));
                                }
                            } else {
                                s.push(com);
                                s.push(x2);
                                s.push(x1);
                                break;
                            }
                            if (s.size() < 3) break;
                        }
                    }
                }
            }
        }
    }
    s.push(make_pair(tmp, '!'));
    while (s.size() - 1) {
        pair<int, char> x1 = s.pop(), x2 = s.pop(), com = s.pop();
        if (com.second == '+') {
            s.push(make_pair(x1.first + x2.first, '!'));
        }
        if (com.second == '-') {
            s.push(make_pair(x2.first - x1.first, '!'));
        }
        if (com.second == '*') {
            s.push(make_pair(x1.first * x2.first, '!'));
        }
        if (com.second == '/') {
            s.push(make_pair(x2.first / x1.first, '!'));
        }
    }
    cout << s.pop().first;
    return 0;
}